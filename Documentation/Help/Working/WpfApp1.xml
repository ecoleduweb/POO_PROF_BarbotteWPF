<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WpfApp1</name>
  </assembly>
  <members>
    <member name="T:WpfApp1.App">
      <summary>
            Interaction logic for App.xaml
            </summary>
      <summary>
            App
            </summary>
    </member>
    <member name="M:WpfApp1.App.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:WpfApp1.App.Main">
      <summary>
            Application Entry Point.
            </summary>
    </member>
    <member name="T:WpfApp1.MainWindow">
      <summary>
            Interaction logic for MainWindow.xaml
            </summary>
      <summary>
            MainWindow
            </summary>
    </member>
    <member name="M:WpfApp1.MainWindow.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:WpfApp1.Partie.AfficherInformation(WpfApp1.MainWindow,System.Int32,System.Int32)">
      <summary>
            Permet de mettre à jour toute l'interface du jeu.
            Cette méthode est appelée à chaque fois qu'on brasse les dés.
            Ce n'est pas grave si on raffraîchit des éléments qui n'ont pas été modifiés.
            </summary>
    </member>
    <member name="M:WpfApp1.Partie.NouvellePartie">
      <summary>
            Permet de recommencer une nouvelle partie.
            On va remettre IndexJoueurActif à 0.
            On va créer un nouvel objet parti et l'attribuer à l'attribu Partie.
            </summary>
    </member>
    <member name="M:WpfApp1.Partie.ProchainJoueur">
      <summary>
            Cette méthode permet de changer la valeur de IndexJoueurActif.
            Si l'index est 0, alors IndexJoueurActif devient 1.
            Si l'index est 1, alors IndexJoueurActif devient 0.
            </summary>
    </member>
    <member name="M:WpfApp1.Partie.DéclarerGagnant">
      <summary>
            Cette méthode est toujours appelée à la fin de BrasserDe.
            Tu dois donc t'assurer que les deux joueurs ont terminé de joué pour accorder des points à l'un de ceux-ci.
            Si les joueur ont joué, la méthode valide si ajoute un point au joueur qui a gagné quand l'autre joueur a perdu.
            Si deux joueurs gagnent, aucun point n'est accordé, c'est partie nulle.
            On va aussi valider ici si un des deux joueurs a un score de 2. Cela implique que le joueur est le grand gagnant de la partie!!
            </summary>
    </member>
    <member name="M:WpfApp1.Partie.BrasserDe(WpfApp1.MainWindow)">
      <summary>
            Cette méthode gère toute la logique du jeu. Tu vas donc y retrouver ton code de la Barbotte que tu avais en WinForm et l'adapter.
            Tu vas avoir besoin de créer des méthodes Set sur tes classes (comme SetNombreARefaire) pour assigner des valeurs à tes joueurs.
            C'est donc ici que tu appelles joueur.Jouer()!
            Tu dois aussi valider si c'est au prochain joueur de jouer (quand le joueur qui joue a terminé sa ronde).
            Un joueur a terminé de jouer lorsqu'il a perdu ou gagner une ronde.
            Tu devrais déduire ici que tu vas avoir besoin des méthodes SetAPerdu, GetAPerdu, SetAGagne, GetAGagne dans ta classe joueur.
            </summary>
      <param name="window">La fenêtre qui contient les éléments à afficher</param>
    </member>
    <member name="N:WpfApp1">
      <summary> </summary>
    </member>
  </members>
</doc>